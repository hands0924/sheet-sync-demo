name: Deploy Cloud Function

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"  # 서비스 계정 키 JSON을 GitHub Secrets에 저장해두었을 때
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: "${{ secrets.GCP_PROJECT }}"      # GCP 프로젝트 ID
          # service_account_key는 제거합니다. :contentReference[oaicite:0]{index=0}

      - name: Deploy to Cloud Functions
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          SHEET_ID: ${{ secrets.SHEET_ID }}
          FIRESTORE_DOC: ${{ secrets.FIRESTORE_DOC }}
          SOLAPI_API_KEY: ${{ secrets.SOLAPI_API_KEY }}
          SOLAPI_API_SECRET: ${{ secrets.SOLAPI_API_SECRET }}
          SENDER_PHONE: ${{ secrets.SENDER_PHONE }}
        run: |
          # 프로젝트 ID 확인
          echo "현재 프로젝트 ID: ${GCP_PROJECT}"
          gcloud projects describe "${GCP_PROJECT}" || {
            echo "프로젝트 ID가 유효하지 않거나 접근할 수 없습니다."
            exit 1
          }
          
          # 인증 후 프로젝트 설정이 올바르게 되었는지 확인
          gcloud config set project "${GCP_PROJECT}"
          gcloud auth list
          
          # 이전 배포 작업이 완료될 때까지 대기
          echo "이전 배포 작업이 완료될 때까지 대기 중..."
          while true; do
            if gcloud functions describe sheet_webhook --region=us-central1 --format="get(state)" 2>/dev/null | grep -q "DEPLOYING"; then
              echo "이전 배포가 진행 중입니다. 30초 대기..."
              sleep 30
            else
              break
            fi
          done
          
          # 환경 변수 파일 생성 (JSON 형식 사용)
          echo '{' > env.json
          echo '  "SHEET_ID": "'"${SHEET_ID}"'",' >> env.json
          echo '  "FIRESTORE_DOC": "'"${FIRESTORE_DOC}"'",' >> env.json
          echo '  "GCP_SA_KEY": "'"$(echo "${{ secrets.GCP_SA_KEY }}" | sed 's/"/\\"/g')"'"' >> env.json
          
          # 선택적 환경 변수 추가
          if [ -n "${SOLAPI_API_KEY}" ]; then
            echo ',"SOLAPI_API_KEY": "'"${SOLAPI_API_KEY}"'"' >> env.json
          fi
          if [ -n "${SOLAPI_API_SECRET}" ]; then
            echo ',"SOLAPI_API_SECRET": "'"${SOLAPI_API_SECRET}"'"' >> env.json
          fi
          if [ -n "${SENDER_PHONE}" ]; then
            echo ',"SENDER_PHONE": "'"${SENDER_PHONE}"'"' >> env.json
          fi
          
          # JSON 파일 닫기
          echo '}' >> env.json
          
          # 실제 배포
          gcloud functions deploy sheet_webhook \
            --runtime python310 \
            --trigger-http \
            --entry-point=sheet_webhook \
            --service-account=sheet-sync-sa@${GCP_PROJECT}.iam.gserviceaccount.com \
            --region=us-central1 \
            --allow-unauthenticated \
            --memory=256MB \
            --timeout=300s \
            --min-instances=0 \
            --max-instances=100 \
            --env-vars-file=env.json
          
          # 배포 상태 확인
          echo "배포 상태 확인 중..."
          for i in {1..12}; do
            state=$(gcloud functions describe sheet_webhook --region=us-central1 --format="get(state)")
            if [ "$state" = "ACTIVE" ]; then
              echo "배포가 성공적으로 완료되었습니다."
              exit 0
            fi
            echo "배포 진행 중... ($i/12)"
            sleep 10
          done
          
          echo "배포 시간이 초과되었습니다. 최종 상태: $state"
          exit 1
